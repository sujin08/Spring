package kr.ac.hit.myapp.member;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URLEncoder;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import kr.ac.hit.myapp.board.AttachVo;

@Controller
public class MemberController {
	//@Autowired @Inject @ Resource 중 하나를 사용하여 알아서 new시킴
	@Resource
	private MemberService memberService ;
	
	@RequestMapping(value="/member/add.do",method=RequestMethod.GET)
	public String addForm() {
		return "member/memAdd";
	}
	
	@RequestMapping(value="/member/add.do",method=RequestMethod.POST)
	public String add(MemberVo vo) {
		memberService.insert(vo);
		return "redirect:/member/list.do";
	}
	
	@RequestMapping("/member/list.do")
	public String list(Map modelmap) {
		List<MemberVo> list = memberService.selectList();
		modelmap.put("memberList", list);
		return "member/memList";
	}
	
	@RequestMapping("/member/edit.do")
	public String editform(String memId, Map mdelmap, HttpSession session) {
		MemberVo login = (MemberVo) session.getAttribute("loginUser");
		if(login.getMemId().equals(memId)==false) {
			throw new RuntimeException("권환읍다 ㅋ");
		}
		MemberVo vo = memberService.select(memId);
		mdelmap.put("Membervo", vo);
		return "member/memEdit";
	}
	
	@RequestMapping(value="/member/edit.do",method=RequestMethod.POST)
	public String edit(MemberVo vo,HttpSession session) {
		MemberVo login = (MemberVo) session.getAttribute("loginUser");
		if(login.getMemId().equals(vo.getMemId())==false) {
			throw new RuntimeException("권환읍다 ㅋ");
		}
		int num = memberService.update(vo);
		return "redirect:/member/list.do";
	}
	
	@RequestMapping("/member/del.do")
	public String delete(String memId,HttpSession session) {
		MemberVo login = (MemberVo) session.getAttribute("loginUser");
		if(login.getMemId().equals(memId)==false) {
			throw new RuntimeException("권환읍다 ㅋ");
		}
		int num = memberService.delete(memId); 
		return "redirect:/member/list.do";
	}
	
	@RequestMapping(value="/member/login.do",method=RequestMethod.GET)
	public String loginForm() {
		return "member/Login";
	}
	
	@RequestMapping(value="/member/login.do",method=RequestMethod.POST)
	public String login(MemberVo vo, HttpSession session) {
		MemberVo mvo = memberService.selectLoginUser(vo);
		if(mvo==null) {
			return "member/Login";	
		}
		session.setAttribute("loginUser", mvo);
		return "redirect:/board/list.do";
	}
	
	@RequestMapping("/member/logout.do")
	public String logout(HttpSession session) {
		//로그아웃 == 세션에 저장된 로그인 정보를 삭제
//		session.setAttribute("loginUser", null);//세션에 "loginUser"라는 이름으로 null을 저장
//		session.removeAttribute("loginUser");//세션에서 "loginUser" 속성 자체를 제거
		session.invalidate(); //세션 객체 자체를 삭제 (하고 새로 생성)
		return "redirect:/member/login.do";
	}
	
	@RequestMapping("/member/down.do")
	public void down(HttpServletResponse resp, String memId) {
		MemberVo vo = memberService.select(memId);
		File f = memberService.getImgFile(vo);
	}
		
}
